package terminal

// functions and structures for the windows console API

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var (
	kernel32                       = windows.NewLazySystemDLL("kernel32")
	procGetConsoleScreenBufferInfo = kernel32.NewProc("GetConsoleScreenBufferInfo")
	procReadConsoleInput           = kernel32.NewProc("ReadConsoleInputW")
	procSetConsoleMode             = kernel32.NewProc("SetConsoleMode")
	procGetConsoleMode             = kernel32.NewProc("GetConsoleMode")
)

const (
	win_error uint32 = 0xffffffff
)

type EventType uint16

const (
	KeyEventType    EventType = 0x0001 //	The Event member contains a KEY_EVENT_RECORD structure with information about a keyboard event.
	MouseEventType  EventType = 0x0002 //	The Event member contains a MOUSE_EVENT_RECORD structure with information about a mouse movement or button press event.
	ResizeEventType EventType = 0x0004 //	The Event member contains a WINDOW_BUFFER_SIZE_RECORD structure with information about the new size of the console screen buffer.
	MenuEventType   EventType = 0x0008 //	The Event member contains a MENU_EVENT_RECORD structure. These events are used internally and should be ignored.
	FocusEventType  EventType = 0x0010 //	The Event member contains a FOCUS_EVENT_RECORD structure. These events are used internally and should be ignored.
)

type InputRecord struct {
	EventType EventType
	_         uint16
	buf       [16]byte
}

func (r *InputRecord) ResizeEvent() *ResizeRecord {
	evt := (*ResizeRecord)(unsafe.Pointer(&r.buf))
	return evt
}

func (r *InputRecord) KeyEvent() *KeyEventRecord {
	evt := (*KeyEventRecord)(unsafe.Pointer(&r.buf))
	return evt
}

func (r *InputRecord) MouseEvent() *MouseEventRecord {
	evt := (*MouseEventRecord)(unsafe.Pointer(&r.buf))
	return evt
}

type ResizeRecord struct {
	Width  int16
	Height int16
}

type KeyEventRecord struct {
	KeyDown         int32
	RepeatCount     uint16
	VirtualKeyCode  uint16
	VirtualScanCode uint16
	Char            uint16
	ControlKeyState KeyState
}

type MouseEventRecord struct {
	MousePosition   Coord
	ButtonState     ButtonState
	ControlKeyState KeyState
	EventFlags      MouseFlags
}

type Coord struct {
	X int16
	Y int16
}

type SmallRect struct {
	Left   int16
	Top    int16
	Right  int16
	Bottom int16
}

type ConsoleScreenBufferInfo struct {
	Size              Coord
	CursorPosition    Coord
	Attributes        uint16
	Window            SmallRect
	MaximumWindowSize Coord
}

func ReadConsoleInput(handle windows.Handle, rec []InputRecord, count *uint32) error {
	r0, _, err := syscall.SyscallN(procReadConsoleInput.Addr(),
		uintptr(handle),
		uintptr(unsafe.Pointer(&rec[0])),
		uintptr(len(rec)),
		uintptr(unsafe.Pointer(count)),
	)
	if uint32(r0) == win_error {
		return err
	}
	return nil
}

type ConsoleMode uint32

const (

	// input modes

	ENABLE_PROCESSED_INPUT        ConsoleMode = 0x0001 // enable processing of input by the system (ex CTRL+C)
	ENABLE_LINE_INPUT             ConsoleMode = 0x0002 // Returns only when a carriage return character is read.
	ENABLE_ECHO_INPUT             ConsoleMode = 0x0004 // Characters read are written to the active screen buffer
	ENABLE_WINDOW_INPUT           ConsoleMode = 0x0008 // changes in the size of the console screen buffer are reported
	ENABLE_MOUSE_INPUT            ConsoleMode = 0x0010 // report mouse events generated by mouse movement and button presses
	ENABLE_INSERT_MODE            ConsoleMode = 0x0020 // text will be inserted and all text following will not be overwritten.
	ENABLE_QUICK_EDIT_MODE        ConsoleMode = 0x0040 // This flag enables the user to use the mouse to select and edit text.
	ENABLE_VIRTUAL_TERMINAL_INPUT ConsoleMode = 0x0200 // Setting this flag directs the Virtual Terminal processing.

	// output modes

	ENABLE_PROCESSED_OUTPUT            ConsoleMode = 0x0001 // Characters written are parsed for ASCII control sequences.
	ENABLE_WRAP_AT_EOL_OUTPUT          ConsoleMode = 0x0002 // when cursor reaches the current rows end it moves to the next row
	ENABLE_VIRTUAL_TERMINAL_PROCESSING ConsoleMode = 0x0004 // parsed for VT100 and similar control character sequences
	DISABLE_NEWLINE_AUTO_RETURN        ConsoleMode = 0x0008 // adds an additional state to end-of-line wrapping.
	ENABLE_LVB_GRID_WORLDWIDE          ConsoleMode = 0x0010 // The APIs for writing character attributes
)

func SetConsoleMode(handle windows.Handle, mode ConsoleMode) error {
	r0, _, err := syscall.SyscallN(procSetConsoleMode.Addr(), uintptr(handle), uintptr(mode))
	if uint32(r0) == win_error {
		return err
	}
	return nil
}

func SetConsoleModeFlag(handle windows.Handle, flags ConsoleMode) (ConsoleMode, error) {
	mode, err := GetConsoleMode(handle)
	if err != nil {
		return mode, err
	}
	if mode&flags == flags {
		return mode, nil
	}
	err = SetConsoleMode(handle, mode|flags)
	if err != nil {
		return mode, err
	}
	return mode, nil
}

func GetConsoleMode(handle windows.Handle) (ConsoleMode, error) {
	var mode ConsoleMode
	r0, _, err := syscall.SyscallN(procGetConsoleMode.Addr(), uintptr(handle), uintptr(unsafe.Pointer(&mode)))
	if uint32(r0) == win_error {
		return 0, err
	}
	return mode, nil
}

func GetConsoleScreenBufferInfo(handle windows.Handle, info *ConsoleScreenBufferInfo) error {
	r0, _, err := syscall.SyscallN(procGetConsoleScreenBufferInfo.Addr(), uintptr(handle), uintptr(unsafe.Pointer(info)))
	if uint32(r0) == win_error {
		return err
	}
	return nil
}
